-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Fri Dec 21 12:10:48 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;


--  Entity Declaration

ENTITY MixColumns IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		RawData : IN STD_LOGIC_VECTOR(127 downto 0);
		Encrypted : OUT STD_LOGIC_VECTOR(127 downto 0)
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END MixColumns;

--  Architecture Body

ARCHITECTURE MixColumns_architecture OF MixColumns IS

function MULTIPLY_ONE(A : STD_LOGIC_VECTOR(7 downto 0) := x"00") return STD_LOGIC_VECTOR is
begin
  return A;
end MULTIPLY_ONE;

function MULTIPLY_TWO(A : STD_LOGIC_VECTOR(7 downto 0) := x"00") return STD_LOGIC_vECTOR is
begin
  return (A(6 downto 0) & '0') xor x"1B";
end MULTIPLY_TWO;
  
function MULTIPLY_THREE(A : STD_LOGIC_VECTOR(7 downto 0) := x"00") return STD_LOGIC_VECTOR is
begin
  return MULTIPLY_TWO(A) xor A;
end MULTIPLY_THREE;

function MIX_ONE_COLUMN(A : STD_LOGIC_VECTOR(31 downto 0) := x"00") return STD_LOGIC_VECTOR is
  variable byteA : STD_LOGIC_VECTOR(7 downto 0) := A(31 downto 24);
  variable byteB : STD_LOGIC_VECTOR(7 downto 0) := A(23 downto 16);
  variable byteC : STD_LOGIC_VECTOR(7 downto 0) := A(15 downto 8);
  variable byteD : STD_LOGIC_VECTOR(7 downto 0) := A(7 downto 0);
begin
  byteA := MULTIPLY_TWO(byteA) xor MULTIPLY_THREE(byteA) xor MULTIPLY_ONE(byteA) xor MULTIPLY_ONE(byteA);
  byteB := MULTIPLY_ONE(byteB) xor MULTIPLY_TWO(byteB) xor MULTIPLY_THREE(byteB) xor MULTIPLY_ONE(byteB);
  byteC := MULTIPLY_ONE(byteC) xor MULTIPLY_ONE(byteC) xor MULTIPLY_TWO(byteC) xor MULTIPLY_THREE(byteC);
  byteD := MULTIPLY_THREE(byteD) xor MULTIPLY_ONE(byteD) xor MULTIPLY_ONE(byteD) xor MULTIPLY_TWO(byteD);
  return byteA xor byteB xor byteC xor byteD;
end MIX_ONE_COLUMN;

BEGIN

MixDatBish : process(RawData)
begin
  Encrypted <= MIX_ONE_COLUMN(RawData(127 downto 120))
               MIX_ONE_COLUMN(RawData(120 downto 113))
--					& MIX_ONE_COLUMN(RawData(63 downto 32))
--					& MIX_ONE_COLUMN(RawData(31 downto 0));
               & x"000000000000000000000000";
end process;

END MixColumns_architecture;